name: CI
on:
  pull_request:
  schedule:
    - cron: "0 3 * * *"

jobs:
  standalone:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run standalone playbook
        run: |
          ansible-playbook \
                --become \
                --connection=local \
                --inventory 127.0.0.1, \
                --limit 127.0.0.1 mongodb.yml -i ansible_hosts
        working-directory: AutomatingMongoDBWithAnsible/playbooks/standalone
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Generate an inventory
        run: echo localhost > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/standalone

      - name: Run unit tests
        run: pytest --connection local tests_mongodbstandalone.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/standalone
        env:
          MONGO_USER: "admin"
          MONGO_PWD: "secret"
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "mongo_inventory.inv"

  replicaset:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
          - "debian"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule test for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Get container names for the inventory file
        run: docker ps | awk '{print $NF}' | grep mongo > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m shell -a "yum install sudo -y || apt install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Run unit tests
        run: pytest --connection docker tests_mongodbreplicaset.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset
        env:
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "mongo_inventory.inv"

      - name: Run molecule destroy for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

  sharded_cluster:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
          - "debian"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

      - name: Write inventory file for cluster
        run: |
          cat << EOF > mongo_inventory.inv
            [mongodb]
            mongodb1
            mongodb2
            mongodb3
            mongodb4
            mongodb5
            mongodb6

            [rs0]
            mongodb1
            mongodb2
            mongodb3

            [rs1]
            mongodb4
            mongodb5
            mongodb6

            [mongos]
            mongos1
            mongos2
            mongos3
          EOF
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y || apt install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

      - name: Run unit tests
        run: pytest --connection docker tests_mongodb_sharded_cluster.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster
        env:
          MONGO_USER: "admin"
          MONGO_PWD: "secret"
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

  upgrade_replicaset:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Get container names for the inventory file
        run: docker ps | awk '{print $NF}' | grep mongo > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run upgrade playbook
        run: ansible-playbook -i mongo_inventory.inv -c docker --skip-tags reboot --tags all,never  mongodb_replicaset_upgrade.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodbreplicaset.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset
        env:
          MONGO_VERSION: "v4.4"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

  upgrade_sharded_cluster:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

      - name: Write inventory file for cluster
        run: |
          cat << EOF > mongo_inventory.inv
            [mongodb]
            mongodb1
            mongodb2
            mongodb3
            mongodb4
            mongodb5
            mongodb6

            [rs0]
            mongodb1
            mongodb2
            mongodb3

            [rs1]
            mongodb4
            mongodb5
            mongodb6

            [mongos]
            mongos1
            mongos2
            mongos3
          EOF
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run upgrade playbook
        run: ansible-playbook -i mongo_inventory.inv -c docker --skip-tags reboot --tags all,never  mongodb_sharded_cluster_upgrade.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodb_sharded_cluster.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster
        env:
          MONGO_USER: "admin"
          MONGO_PWD: "secret"
          MONGO_VERSION: "v4.4"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

  downgrade_replicaset:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Get container names for the inventory file
        run: docker ps | awk '{print $NF}' | grep mongo > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run downgrade playbook
        run: ansible-playbook -i mongo_inventory.inv -c docker --skip-tags reboot --tags all,never --extra-vars="current_mongodb_version=4.2 target_mongodb_version=4.0"  mongodb_replicaset_downgrade.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodbreplicaset.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset
        env:
          MONGO_VERSION: "v4.0"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

  downgrade_sharded_cluster:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

      - name: Write inventory file for cluster
        run: |
          cat << EOF > mongo_inventory.inv
            [mongodb]
            mongodb1
            mongodb2
            mongodb3
            mongodb4
            mongodb5
            mongodb6

            [rs0]
            mongodb1
            mongodb2
            mongodb3

            [rs1]
            mongodb4
            mongodb5
            mongodb6

            [mongos]
            mongos1
            mongos2
            mongos3
          EOF
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run downgrade playbook
        run: ansible-playbook -i mongo_inventory.inv -c docker --skip-tags reboot --tags all,never --extra-vars="current_mongodb_version=4.2 target_mongodb_version=4.0"  mongodb_sharded_cluster_downgrade.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodb_sharded_cluster.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster
        env:
          MONGO_USER: "admin"
          MONGO_PWD: "secret"
          MONGO_VERSION: "v4.0"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

  resize_oplog:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Get container names for the inventory file
        run: docker ps | awk '{print $NF}' | grep mongo > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run oplog resize playbook
        run: ansible-playbook -i mongo_inventory.inv -c docker resize_oplog.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodbreplicaset.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset
        env:
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

  resync_member:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Get container names for the inventory file
        run: docker ps | awk '{print $NF}' | grep mongo > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run resync member playbook
        run: ansible-playbook -i mongo_inventory.inv --limit mongodb-2 -c docker resync_member.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodbreplicaset.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset
        env:
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

  patch_os:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Get container names for the inventory file
        run: docker ps | awk '{print $NF}' | grep mongo > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run patch os playbook
        run: ansible-playbook -i mongo_inventory.inv -c docker --skip-tags reboot rolling_os_update.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodbreplicaset.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset
        env:
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

  resync_member_from_tar:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }}
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

      - name: Get container names for the inventory file
        run: docker ps | awk '{print $NF}' | grep mongo > mongo_inventory.inv
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Create a tar backup of the mongodb data dir
        run: |
          docker exec mongodb-2 systemctl stop mongod
          docker exec mongodb-2 tar czf mongo.tar.gz /var/lib/mongo
          docker exec mongodb-2 systemctl start mongod
          docker cp mongodb-2:mongo.tar.gz .
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance

      - name: Run resync member from tar playbook
        run: ansible-playbook -i mongo_inventory.inv --limit mongodb-2 -c docker resync_member_from_tar.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/maintenance
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodbreplicaset.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset
        env:
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "../maintenance/mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }}
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/replicaset

  add_shard:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: AutomatingMongoDBWithAnsible
    strategy:
      matrix:
        python_version:
          - "2.7"
          - "3.6"
          - "3.9"
        molecule_scenario:
          - "default"
          - "debian"
        collection:
          - "latest"
          - "requirements.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: AutomatingMongoDBWithAnsible

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python_version }}

      - name: Run CI_Setup.sh script
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: cd AutomatingMongoDBWithAnsible && .github/bash/CI_Setup.sh
        env:
          COLLECTION: ${{ matrix.collection }}

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }} - shards rs0 & rs1
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

      - name: Run molecule converge for scenario ${{ matrix.molecule_scenario }} - shard rs2
        run: molecule converge --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/add_shard

      - name: Write inventory file for cluster
        run: |
          cat << EOF > mongo_inventory.inv
            [mongodb]
            mongodb1
            mongodb2
            mongodb3
            mongodb4
            mongodb5
            mongodb6
            mongodb7
            mongodb8
            mongodb9

            [rs0]
            mongodb1
            mongodb2
            mongodb3

            [rs1]
            mongodb4
            mongodb5
            mongodb6

            [rs1]
            mongodb7
            mongodb8
            mongodb9

            [mongos]
            mongos1
            mongos2
            mongos3
          EOF
        working-directory: AutomatingMongoDBWithAnsible/playbooks/add_shard

      - name: Install sudo in docker
        run: ansible all -i mongo_inventory.inv -c docker -m raw -a "yum install sudo -y || apt install sudo -y"
        working-directory: AutomatingMongoDBWithAnsible/playbooks/add_shard

      - name: Run upgrade playbook
        run: ansible-playbook -i mongo_inventory.inv -c docker add_shard.yml
        working-directory: AutomatingMongoDBWithAnsible/playbooks/add_shard
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: "../../.vault_pass.txt"

      - name: Run unit tests
        run: pytest --connection docker tests_mongodb_sharded_cluster.py
        working-directory: AutomatingMongoDBWithAnsible/playbooks/add_shard
        env:
          MONGO_VERSION: "v4.2"
          ANSIBLE_INVENTORY: "mongo_inventory.inv"

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }} - shards rs0 & rs1
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/sharded_cluster

      - name: Clean up molecule env for scenario ${{ matrix.molecule_scenario }} - rs2
        run: molecule destroy --scenario-name ${{ matrix.molecule_scenario }}
        working-directory: AutomatingMongoDBWithAnsible/playbooks/add_shard
